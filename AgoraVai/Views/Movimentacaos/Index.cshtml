@model IEnumerable<AgoraVai.Models.Movimentacao>
@{
    /**/
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Movimentacao.cshtml";

}

@*<input style="height: 50px; width: 50%; text-align: center; background-color: #318aff; border-radius: 200px; font-size: 28px; color: black;" type="text" name="Pesquisa" placeholder="Pesquisar..." id="pesquisa" />*@

<section class="section--login">
    <div class="tabela--search__div">
        <i class="fas fa-search"></i>
        <input type="text" class="tabela--search" placeholder="Pesquisar placa...">
    </div>

    <table class="tabela tabela__up">
        <tr class="tabela--infos tabela__bold">
            <th>
                @Html.DisplayNameFor(model => model.Funcionario.Pessoa.Nome)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Vaga.Tipo)
            </th>
            <th>
                CPF
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Telefone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Placa)
            </th>
            <th>
                Hora de entrada
            </th>
            <th>
                Tempo
            </th>
            <th>Finalizar</th>
            @*<th></th>*@
        </tr>


        @foreach (var item in Model)
        {
            <tr class="tabela--infos">
                <td>
                    @Html.DisplayFor(modelItem => item.Funcionario.Pessoa.Nome)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Vaga.Tipo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cpf)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Telefone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Placa)
                </td>
                <td class="rds">
                    @Html.DisplayFor(modelItem => item.hora_entrada)
                </td>
                <td class="timer"></td>
                <td>
                    @Html.ActionLink("Finalizar", "Edit", new { id = item.Id }, new { @class = "btn btn--login btn__pattern btn--padding" })
                    @*@Html.ActionLink("Detalhes", "Details", new { id = item.Id })*@
                    @*@Html.ActionLink("Delete", "Delete", new { id = item.Id })*@
                </td>
            </tr>
        }

    </table>
</section>

<script>
    function searchFilter() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.querySelector('.tabela--search');
        filter = input.value.toUpperCase();
        table = document.querySelector('.tabela');
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[4];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
    document.querySelector('.tabela--search').addEventListener('keyup', searchFilter);


    //CRONOMETRO
    //cria cronometro
    var tempos = [], oldDias = [], oldMeses = [], oldHoras = [], oldMinutos = [], oldSegundos = [];
    function tempoAntigo() {
        //pega tempo antigo separadamente
        for (var i = 0; i < document.querySelectorAll('.timer').length; i++) {
            var timeStamp = document.getElementsByClassName('rds')[i].innerHTML; //pega os valores do tempo de entrada
            tempos.push(timeStamp); //Adiciona o tempo atual da linha ao tempos array
            oldDias[i] = `${Array.from(tempos[i])[21] + Array.from(tempos[i])[22]}`;
            oldMeses[i] = `${Array.from(tempos[i])[24] + Array.from(tempos[i])[25]}`;
            oldHoras[i] = `${Array.from(tempos[i])[32] + Array.from(tempos[i])[33]}`;
            oldMinutos[i] = `${Array.from(tempos[i])[35] + Array.from(tempos[i])[36]}`;
            oldSegundos[i] = `${Array.from(tempos[i])[38] + Array.from(tempos[i])[39]}`;
        }
    }
    tempoAntigo();
    /*var cronometroDias = [], cronometroHoras = [], cronometroMinutos = [], cronometroSegundos = [];*/ //Pega horario toral do cronometro
    var cronometroDias = [],
        cronometroHoras = [],
        cronometroMinutos = [],
        Remainder = [];
    //pegar Hora atual
    setInterval(function () {
        // var data = new Date();
        //Display cronometro
        for (var i = 0; i < document.querySelectorAll('.timer').length; i++) {

            //total de dias
            //var date_diff_indays = function (date1, date2) {
            //    dt1 = new Date(date1);
            //    dt2 = new Date(date2);
            //    return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1
            //        .getFullYear(), dt1.getMonth(), dt1.getDate())) / (1000 * 60 * 60 * 24));
            //}


            //var dataAntiga, dataAtual;
            //dataAntiga = new Date(2019, oldMeses[i], oldDias[i], oldHoras[i], oldMinutos[i]);
            //dataAtual = new Date(data.getFullYear(), data.getMonth(), data.getDate(), data.getHours(), data.getMinutes());
            //cronometroHoras[i] = date_diff_indays(dataAntiga, dataAtual) * 24; //total de horas



            //function SplitTime() {
            //   //    var Days = Math.floor(numberOfHours / 24);
            //   //var Remainder = numberOfHours % 24;
            //   ////var Hours = Math.floor(Remainder);
            //   //var Minutes = Math.floor(60 * (Remainder - Hours));

            //    var dif = dataAntiga - dataAtual;

            //    var sl = new Date(dataAntiga);


            //    var Minutes = dif / (60 * 1000) % 60;
            //    var Hours = dif / (60 * 60 * 1000);
            //     console.log(dif);
            //   return ({
            //      Minutes,
            //      Hours
            //    })
            //}
            ////SplitTime(cronometroHoras[i]);
            //var timeResult = SplitTime();

            //var rds = Number(cronometroHoras[i]);

            //console.log(timeResult.cronometroDias[i] + " Days " + timeResult.cronometroHoras[i] + " Hours and " + timeResult.cronometroMinutos[i] + " Minutes.");
            //exibe cronometro
            var print = new Date();

           // var tempo =  Number((oldHoras[i] * 60 + oldMinutos[i]));

            var tempo = Number(((print.getHours()*60) + print.getMinutes()));
            tempo = tempo - (Number((oldHoras[i] * 60)) + Number(oldMinutos[i]));

            if (tempo < 0) {
                tempo * -1;
            }
        
            console.log(Number((print.getHours() + print.getMinutes())));
            cronometroHoras[i] = 0;
            cronometroMinutos[i] = tempo;
            for (var j = tempo; j >= 60; j -= 60) {
                cronometroHoras[i] += 1;
                cronometroMinutos[i] = j-60;
            }

            document.getElementsByClassName("timer")[i].innerHTML = `${cronometroHoras[i]}horas ${cronometroMinutos[i]}minutos`;
    }


    }, 1000);
    //CRONOMETRO



</script>
